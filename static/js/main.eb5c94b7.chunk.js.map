{"version":3,"sources":["components/contactform/ContactForm.module.css","components/contact/Contact.module.css","components/filter/Filter.module.css","components/contactform/ContactForm.js","components/contact/Contact.js","components/contactlist/ContactList.js","components/filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","contacts","find","contact","alert","onSubmit","id","uuidv4","reset","this","className","s","form","input","type","pattern","title","required","onChange","button","React","Component","Contact","deleteContact","map","list","onClick","ContactList","Filter","filter","changeFilter","App","formSubmitHandler","data","getVisibleContacts","normalizedFilter","toLowerCase","includes","contactId","prevState","localStorage","getItem","JSON","parse","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb5c94b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__15_C6\",\"input\":\"ContactForm_input__5U5De\",\"button\":\"ContactForm_button__2bcWB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__2_2Uc\",\"button\":\"Contact_button__jYwrt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3K0YO\"};","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends React.Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (this.props.contacts.find(contact => contact.name === this.state.name)) {\n      alert(`${this.state.name} is already in contacts`);\n    } else {\n      this.props.onSubmit({\n        id: uuidv4(),\n        name: this.state.name,\n        number: this.state.number,\n      });\n      this.reset();\n    }\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={s.form} onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n};\n\nexport { ContactForm };\n","import PropTypes from \"prop-types\";\nimport s from \"./Contact.module.css\";\n\nconst Contact = ({ contacts, deleteContact }) => (\n  <>\n    {contacts.map((contact) => (\n      <li className={s.list} key={contact.id}>\n        {contact.name}: {contact.number}\n        <button\n          className={s.button}\n          type=\"button\"\n          onClick={() => deleteContact(contact.id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </>\n);\n\nContact.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n\nexport { Contact };\n","import { Contact } from \"../contact\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, deleteContact }) => (\n  <ul>\n    <Contact contacts={contacts} deleteContact={deleteContact} />\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n};\n\nexport { ContactList };\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\n\nconst Filter = ({ filter, changeFilter }) => (\n  <label>\n    Find contacts by name\n    <input\n      className={s.input}\n      type=\"text\"\n      name=\"filter\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      value={filter}\n      onChange={changeFilter}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport { Filter };\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nimport { ContactForm } from './components/contactform';\nimport { ContactList } from './components/contactlist';\nimport { Filter } from './components/filter';\n\nclass App extends React.Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    localStorage.getItem('contacts') &&\n      this.setState({ contacts: JSON.parse(localStorage.getItem('contacts')) });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  }\n\n  changeFilter = e => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  formSubmitHandler = data => {\n    this.setState({ contacts: [...this.state.contacts, data] });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm contacts={contacts} onSubmit={this.formSubmitHandler} />\n        <h2>Contacts</h2>\n        <Filter filter={filter} changeFilter={this.changeFilter} />\n        <ContactList\n          contacts={this.getVisibleContacts()}\n          deleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n  filter: PropTypes.string,\n};\n\nexport { App };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}